Problem Link:-
https://www.naukri.com/code360/problems/segregate-even-and-odd-nodes-in-a-linked-list_1116100?leftPanelTabValue=PROBLEM
https://www.geeksforgeeks.org/problems/segregate-even-and-odd-nodes-in-a-linked-list5035/1?itm_source=geeksforgeeks&itm_medium=article&itm_campaign=practice_card

Brute Force:- Using extra arrayLists
import java.util.*;
public class Solution
{
    public static Node segregateEvenOdd(Node head)
    {
        // Write Your Code Here.
        ArrayList<Integer> even = new ArrayList<>();
        ArrayList<Integer> odd  = new ArrayList<>();

        int idx=0;
        Node temp=head;

        while(temp!=null)
        {
            if(temp.data%2==0)
            {
                even.add(temp.data);
            }
            else
            {
                odd.add(temp.data);
            }
            temp=temp.next;
        }

        int idx1=0,idx2=0;
        idx=0;
        temp=head;

        while(idx1!=even.size())
        {
            
                temp.data = even.get(idx1);
                idx1++;
                temp=temp.next;
            
        }

        while(idx2!=odd.size())
        {
            temp.data=odd.get(idx2);
            idx2++;
            temp=temp.next;
        }
        return head;

    }
}

T.C. -> O(N)
S.C. -> O(N)


Optimal Solution:- Make use of 2 dummy nodes and pointers addHead, oddTail, evenHead and evenTail and traverse the LL and then connect the node to the oddTail
if it is an odd element, else connect it to evenTail and then at last connect evenTail and oddHead.next i.e. start of odd list.

Code:-
public class Solution
{
    public static Node segregateEvenOdd(Node head)
    {
        // Write Your Code Here.
        Node oddHead=new Node(0);
        Node evenHead=new Node(0);

        Node oddTail=oddHead;
        Node evenTail=evenHead;

        Node temp=head;
        while(temp!=null)
        {
            if(temp.data%2==0)
            {
                evenTail.next = temp;
                evenTail=evenTail.next;
            }
            else
            {
                oddTail.next = temp;
                oddTail=oddTail.next;
            }
            temp=temp.next;
        }

        evenTail.next=oddHead.next;
        oddTail.next = null;
        return evenHead.next;
    }
}

T.C. -> O(N)
S.C. -> O(1)
