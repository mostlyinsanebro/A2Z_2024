Problem Link:-
https://leetcode.com/problems/linked-list-cycle-ii/description/
https://www.geeksforgeeks.org/problems/find-the-first-node-of-loop-in-linked-list--170645/1

Brute Force Solution:-
Use a hashMap and traverse the array while keeping the occurences in the map as well and on finding the node already there in HashMap,then return it as an answer.

Code:-
public class Solution {
    public ListNode detectCycle(ListNode head) {
        HashMap<ListNode,Integer> map= new HashMap<>();

        ListNode temp=head;

        while(temp!=null)
        {
            if(map.containsKey(temp)) return temp;
            map.put(temp,map.getOrDefault(temp,0)+1);
            temp=temp.next;
        }
        return null;
        
    }
}

Note:- Store the Node as key and not the value as key.

T.C.-> O(N*2logN) ~ lgN if map tales logN for insertion and selection and 1 if map takes O(1) for insertion and selection.
S.C. -> O(N)


Optimal Solution:-
