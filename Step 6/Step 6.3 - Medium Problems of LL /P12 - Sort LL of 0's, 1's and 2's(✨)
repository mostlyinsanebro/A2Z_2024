Problem Link:-
https://www.geeksforgeeks.org/problems/given-a-linked-list-of-0s-1s-and-2s-sort-it/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=given-a-linked-list-of-0s-1s-and-2s-sort-it
https://www.naukri.com/code360/problems/sort-linked-list-of-0s-1s-2s_1071937

Solution:-

Brute Force:- Traverse the LL and put it in ArrayList, then sort the arraylist and put elements from the list back to LL and return head.
Code:-
class Solution {
    // Function to sort a linked list of 0s, 1s and 2s.
    static Node segregate(Node head) {
        // add your code here
        ArrayList<Integer> al= new ArrayList<>();
        Node temp=head;
        
        while(temp!=null)
        {
            al.add(temp.data);
            temp=temp.next;
        }
        
        Collections.sort(al);
        
        temp=head;
        int i=0;
        
        while(temp!=null)
        {
            temp.data=al.get(i);
            i++;
            temp=temp.next;
        }
        return head;
    }
}

T.C. -> O(2N)
S.C. -> O(N)

Better Approach:- Count of number of 0's,1's and 2's  while traversing the LL and then traverse it again and put 0's at the end, then 1's and then 2's.
Code:-
class Solution {
    // Function to sort a linked list of 0s, 1s and 2s.
    static Node segregate(Node head) {
        // add your code here
        int c0 = 0,c1=0,c2=0;
        
        Node temp=head;
        while(temp!=null)
        {
            if(temp.data==0) c0++;
            else if(temp.data==1) c1++;
            else c2++;
            
            temp=temp.next;
        }
        
        
        temp=head;
        
        int i=1;
        
        while(temp!=null)
        {
            if(c0!=0) 
            {
                temp.data=0;
                c0--;
            }
            else if(c1!=0) 
            {   
                temp.data=1;
                c1--;
            }
            else temp.data =2;
            
            temp=temp.next;
        }
        return head;
        
    }
}

T.C. -> O(2N)
S.C. -> O(1)

Optimal Solution:- Make use of dummy nodes, traverse the LL and then point the corresponding value node to the correct variable dummy node and after traversal is 
completed, link the three different created LL of 0's,1's and 2's.

Code:-
class Solution {
    // Function to sort a linked list of 0s, 1s and 2s.
    static Node segregate(Node head) {
        
        if(head==null||head.next==null) return head;
        // add your code here
        Node zeroHead = new Node(-1);
        Node oneHead=new Node(-1);
        Node twoHead=new Node(-1);
        
        Node zero = zeroHead;
        Node one = oneHead;
        Node two = twoHead;
        
        
        Node temp=head;
        while(temp!=null)
        {
            if(temp.data==0)
            {
                zero.next = temp;
                zero=zero.next;
            }
            else if(temp.data==1)
            {
                one.next = temp;
                one=one.next;
            }
            else
            {
                two.next  = temp;
                two=two.next;
            }
            
            temp=temp.next;
        }
        
        
        // Handle edge cases now
        zero.next = (oneHead.next!=null) ? oneHead.next:twoHead.next;
        one.next = twoHead.next;
        two.next = null;
        
        
        Node newHead = zeroHead.next;
        return newHead;
}

T.C. -> O(N)
S.C. -> O(1)


