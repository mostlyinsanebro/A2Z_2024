Problem Link:-
https://leetcode.com/problems/sort-list/description/


Brute Force Solution:- Transfer the LL into al and then merge sort the AL and then put the elements back in LL and return the answer.

Code:-
class Solution {
    public ListNode sortList(ListNode head) {
        ListNode temp=head;
        ArrayList<Integer> al = new ArrayList<>();
        while(temp!=null)
        {
            al.add(temp.val);
            temp=temp.next;
        }
        mergeSort(al,0,al.size()-1);

        temp=head;
        int idx=0;
        while(temp!=null)
        {
            temp.val=al.get(idx);
            idx++;
            temp=temp.next;
        }
        return head;
    }

    public void mergeSort(ArrayList al,int l,int h)
    {
        if(l>=h) return;

        int mid=(l+h)/2;
        mergeSort(al,l,mid);
        mergeSort(al,mid+1,h);
        merge(al,l,mid,h);
    }
    public void merge(ArrayList<Integer> al,int l,int mid,int h)
    {
        ArrayList<Integer> ans=new ArrayList<>();
        int i=l;
        int j=mid+1;
        while(i<=mid&&j<=h)
        {
            if(al.get(i)<=al.get(j))
            {
                ans.add(al.get(i));
                i++;
            }
            else
            {
                ans.add(al.get(j));
                j++;
            }
        }

        while(i<=mid)
        {
            ans.add(al.get(i));
            i++;
        }

        while(j<=h)
        {
            ans.add(al.get(j));
            j++;
        }

        for(i=0;i<ans.size();i++)
        {
            al.set(i+l,ans.get(i));
        }
    }
}


T.C. -> O(NlogN)
S.C. -> O(N)



Optimal Solution:- Use the merge Sort algorithm for it.

Step 1). Find the first middle of LL.
Step 2). Bifurcate the LL into two Lists and then call Ms on them separately.
Step 3). Merge the two sorted Lists and return the new Head.

Code:-
class Solution {
    public ListNode sortList(ListNode head) {
        if(head==null||head.next==null)
            return head;

        ListNode middle  = findMiddle(head);
        System.out.println(middle.val);
        ListNode leftHead = head;
        ListNode rightHead=middle.next;
        middle.next = null;

        leftHead = sortList(leftHead);
        rightHead = sortList(rightHead);

        return merge(leftHead,rightHead);
    }

    public ListNode findMiddle(ListNode head)
    {
        ListNode fast = head;
        ListNode slow = head;

        while(fast.next!=null&&fast.next.next!=null)
        {
            fast=fast.next.next;
            slow=slow.next;
        }
        return slow;
    }

    public ListNode merge(ListNode head1,ListNode head2)
    {
        if(head1==null) return head2;
        if(head2==null) return head1;
        ListNode t1=head1;
        ListNode t2=head2;

        ListNode newHead = new ListNode(0);
        ListNode temp=newHead;

        while(t1!=null&&t2!=null)
        {
            if(t1.val<=t2.val)
            {
                temp.next = t1;
                t1=t1.next;
            }
            else
            {
                temp.next=t2;
                t2=t2.next;
            }
            temp=temp.next;
        }

        while(t1!=null)
        {
            temp.next = t1;
            t1=t1.next;
            temp=temp.next;
        }

        while(t2!=null)
        {
            temp.next = t2;
            t2=t2.next;
            temp=temp.next;
        }

        newHead=newHead.next;
        return newHead;
    }
}

T.C. -> O((N+N/2)logN) 
S.C. -> O(N) [ Stack space ] 

else, O(1)

