Problem Link:-
https://www.geeksforgeeks.org/problems/remove-duplicates-from-a-sorted-doubly-linked-list/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=remove-duplicates-from-a-sorted-doubly-linked-list


Solution:-
class Solution{
    Node removeDuplicates(Node head){
        // Code Here.
        if(head==null) return head;
        Node temp=head;
        Node temp1=null;
        while(temp.next!=null)
        {
            if(temp.data==temp.next.data)
            {
                if(temp.next.next==null)
                {
                    temp.next.prev=null;
                    temp.next=null;
                }
                else
                {
                    temp1=temp.next;
                    temp.next=temp1.next;
                    temp1.next.prev=temp;
                    temp1.next=null;
                    temp1.prev=null;
                }
            }
            else
            {
                temp=temp.next;
            }
        }
        return head;
    }
}

T.C. -> O(N)
S.C. -> O(1)

Better Solution:- Instead of changing the links every time you find a duplicate, find the next non-duplicate node and then change the links.
Code:-
class Solution{
    Node removeDuplicates(Node head){
        // Code Here.
        
        if(head==null) return head;
        
        Node temp=head;
        Node nextNode  = temp.next;
        
        while(nextNode!=null)
        {
            if(temp.data!=nextNode.data)
            {
                temp.next=nextNode;
                nextNode.prev=temp;
                temp=nextNode;
            }
           
            nextNode = nextNode.next;
            
        }
        temp.next = nextNode;
        return head;
        
    }
}

T.C. -> O(N)
S.C. -> O(1)
