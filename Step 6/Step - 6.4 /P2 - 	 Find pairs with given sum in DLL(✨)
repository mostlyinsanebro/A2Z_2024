Problem Link:-
https://www.geeksforgeeks.org/problems/find-pairs-with-given-sum-in-doubly-linked-list/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=find-pairs-with-given-sum-in-doubly-linked-list
https://www.naukri.com/code360/problems/find-pair-with-a-given-sum-in-a-doubly-linked-list_1164172

Brute Force Solution:- Linear Search
Code:-
class Solution {
    public static ArrayList<ArrayList<Integer>> findPairsWithGivenSum(int target, Node head) {
        // code here
        //HashSet<Integer> set = new HashSet<>();
        ArrayList<Integer> al1 = new ArrayList<>();
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        
        Node temp=head;
        Node temp1=head;
        
        while(temp!=null)
        {
            temp1=temp.next;
            while(temp1!=null)
            {
                if(temp.data+temp1.data>target) break;
                if(temp1.data==(target-temp.data))
                {
                    al1.add(temp.data);
                    al1.add(temp1.data);
                }
                
                temp1=temp1.next;
                
                if(al1.size()>0)
                {
                    ans.add(al1);
                }
                al1=new ArrayList<>();
            }
            temp=temp.next;
        }
        return ans;
        
    }
}


T.C. -> O(N^2)
S.C. -> O(2N)

Note:- This fails in case of large test cases.

Better Approach:- Make use of HashSet.
Code:-
class Solution {
    public static ArrayList<ArrayList<Integer>> findPairsWithGivenSum(int target, Node head) {
        // code here
        ArrayList<Integer> al1 = new ArrayList<>();
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        HashSet<Integer> set = new HashSet<>();
        
        Node temp=head;
        while(temp!=null)
        {
            if(temp.data>target) break;
            if(temp.data*2!=target)
                set.add(temp.data);
            temp=temp.next;
        }
        
        //System.out.println(set.size());
        
        temp=head;
        while(temp!=null)
        {
            if(set.contains(target-temp.data))
            {
                al1.add(temp.data);
                al1.add(target-temp.data);
                ans.add(al1);
                
                set.remove(temp.data);
                set.remove(target-temp.data);
                //System.out.print(al1);
            }
            
            temp=temp.next;
            al1=new ArrayList<>();
        }
        return ans;
    }
}

T.C. -> O(2N*1) ~ considering the insert and fetch in HashSet takes O(1) time.
S.C. -> O(N)


Optimal Solution: Make use of the 2 pointer approach since this is a sorted LL.
Code:-
class Solution {
    public static ArrayList<ArrayList<Integer>> findPairsWithGivenSum(int target, Node head) {
        // code here
        Node left=head;
        Node right=head;
        ArrayList<Integer> al1 = new ArrayList<>();
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>(); 
        
        while(right.next!=null)
        {
            right=right.next;
        }
        
        while(left.data<right.data)
        {
            if(left.data+right.data == target)
            {
                al1.add(left.data);
                al1.add(right.data);
                ans.add(al1);
                al1=new ArrayList<>();
                left=left.next;
                right=right.prev;
            }
            else if(left.data+right.data>target)
            {
                right=right.prev;
            }
            else
            {
                left=left.next;
            }
        }
        return ans;
    }
}

T.C. -> O(N+N/2)
S.C. -> O(1) ~ leaving the space for two ArrayLists that we used to return our answer only.


