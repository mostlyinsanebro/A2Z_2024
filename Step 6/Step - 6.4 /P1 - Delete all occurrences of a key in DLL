Problem Link:-
https://www.geeksforgeeks.org/problems/delete-all-occurrences-of-a-given-key-in-a-doubly-linked-list/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=delete-all-occurrences-of-a-given-key-in-a-doubly-linked-list
https://www.naukri.com/code360/problems/delete-all-occurrences-of-a-given-key-in-a-doubly-linked-list_8160461

Approach:- Traverse the DLL and then check if the node has the same value as the key. If yes, and the node is head and also the single node left in DLL, return null,
else if the node is head, delete accordingly, if it is tail, then delete accordingly, else if the node is in between somewhere, delete accordingly.
If the node value does not match that of the key, go to the next element in the DLL.

Better Solution in terms of Code Structure:-
public class Solution {
    public static Node deleteAllOccurrences(Node head, int k) {
        // Write your code here.

        Node temp=head;
        Node temp1=null;

        while(temp!=null)
        {
            // The node has the same value as the key.
            if(temp.data==k)
            {
                // node is head and also the single node left in DLL, return null.
                if(temp==head&&temp.prev==null&&temp.next==null)
                    return null;
                // The node is head, delete accordingly.
                else if(temp==head)
                {
                    head=temp.next;
                    temp.next.prev=null;
                    temp.next=null;
                    temp=head;
                }
                // if it is tail, then delete accordingly
                else if(temp.next==null)
                {
                    temp.prev.next=null;
                    temp.prev=null;
                    temp=null;
                } 
                // else if the node is in between somewhere, delete accordingly.
                else
                {
                    temp1=temp.next;
                    temp.prev.next=temp.next;
                    temp.next.prev=temp.prev;
                    temp.next=null;
                    temp.prev=null;
                    temp=temp1;
                }
            }
            // If the node value does not match that of the key, go to the next element in the DLL.
            else 
                temp=temp.next;
        }
        return head;
    }
}

T.C. -> O(N)
S.C. -> O(1)
