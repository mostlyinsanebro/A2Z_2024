Problem Link:-
https://geeksforgeeks.org/problems/move-all-zeroes-to-end-of-array0751/1


Solutions:-
Brute:- Use another array to store the non-zero elements and then copy the non-zero elements to the start of the array and then insert zeroes to the
remaining indexes of the array.
Code:-


//User function Template for Java

class Solution {
    void pushZerosToEnd(int[] arr, int n) {
        // code here
        
        // Using extra array
        int c=0,j=0;
        
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]!=0) c=c+1;
        }
        
        int temp[]= new int[c];
        
        for(int i=0;i<n;i++)
        {
            if(arr[i]!=0)
            {
                temp[j]=arr[i];
                j++;
            }
        }

        for(int i=0;i<n;i++)
        {
            if(i<c)
            arr[i]=temp[i];
            
            else
            arr[i]=0;
        }
        
    }
}

T.C. -> O(n)
S.C. -> O(c) -> c is the number of non-zero elements in the array. In the worst-case scenario, the S.C. can be O(n).


Optimal Solution:-
Use the two-pointer approach. Keep i and j both at the 0th index and then check if the jth index has 0 element on it, if yes then increment j by 1,
else swap i and j and increment both by 1. Keep doing this until j<n. Zeroes will be moved to the end.


In this case, if i and j both are at the same index at a non-zero element, then the element will be swapped with itself and i and j will be incremented,
but if the element is 0, then i will stay at that 0 while j will keep on incrementing until it reaches the next non-zero element in the array or j reaches
at the end of the array. On reaching the end, the array will be in the desired state, and in the other case if i reach a non-zero element, then it will get
swapped with the ith index element which has a 0 element at it and i will get incremented and j will also get incremented. In this way, all the zeroes 
will move at the end of the array leaving the non-zero elements in the original order.

Code:-
        public static int[] moveZeros(int n, int []a) {
        // Write your code here.
        int i=0,j=0,temp=0;
        
        while(j<n)
        {
            if(a[j]==0)
            {
                j++;
            }
            else
            {
                temp=a[i];
                a[i]=a[j];
                a[j]=temp;
                i++;
                j++;
            }
        }

        return a;
    }


T.C. -> O(n)
