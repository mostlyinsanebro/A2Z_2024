Problem Link:-
https://leetcode.com/problems/check-if-array-is-sorted-and-rotated/description/


Approach:- Find the correct position of the min element and then from there check if array is sorted or not till the end and then check if array is sorted 
from start to that index and return true if it is sorted in fact.

Code:-
class Solution {
    public boolean check(int[] arr) {
        // find the smallest element in array and then go from that idx to n and check if sorted and then 
        // go from 0 -> idx-1 and check if sorted.
        int min=0;

        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]<arr[min])
            {
                min=i;
            }
        }

        if(arr.length>=2&&arr[arr.length-1] == arr[min])
        {
            int i=arr.length-1;
            while(i>0&&arr[i]==arr[i-1])
            {
                i--;
            }
            min=i;
        }


        boolean isSorted = true;

        for(int i=min;i<arr.length-1;i++)
        {
            if(arr[i]>arr[i+1])
            {
                isSorted = false;
                break;
            }
        }

        int lastVal = arr[arr.length-1];

        if(min>0&&arr[0]<lastVal)
            return false;

        for(int i=0;i<min-1;i++)
        {
            if(arr[i]>arr[i+1])
            {
                isSorted=false;
                break;
            }
        }

        return isSorted;
    }
}

T.C. -> O(N)
S.C. -> O(1)
