Problem Link:-
https://leetcode.com/problems/set-matrix-zeroes/description/


Solution:- 

Brute Force:- Traverse the matrix and for each element equal to 0, mark the corresponding rows and columns to that element that are not 0 with a unique number.
Then traverse the matrix again and for each element that is equal to the unique number, make it 0.

Code:-
lass Solution {
    public void setZeroes(int[][] matrix) {

        // Approach -> Traverse the whole array and for each position having a zero on it, mark the corresponding
        // rows and columns as -1.Then again, traverse the array and mark the -1's as 0.

        int n=matrix.length;
        int m=matrix[0].length;

        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(matrix[i][j]==0)
                {
                    markRow(matrix,i);
                    markCol(matrix,j);
                }
            }
        }

        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
               if(matrix[i][j]==-525)
               {
                   matrix[i][j]=0;
               }
            }
        }
    }
        public static void markRow(int[][] matrix,int row)
        {
            for(int j=0;j<matrix[0].length;j++)
            {
                if(matrix[row][j]!=0)
                matrix[row][j]=-525;
            }
        }

        public static void markCol(int[][] matrix,int col)
        {
            for(int i=0;i<matrix.length;i++)
            {
                if(matrix[i][col]!=0)
                matrix[i][col]=-525;
            }
        }   
}


T.C. -> O(n*m)*O(n+m) + O(n*m) ~O(N^3)
S.C. -> O(1)



Better Approach:- For this approach, we need to know for each element whether a 0 comes in its corresponding row or col, and if yes, then make it a 0
else not. To achieve that, we take 2 arrays, col[m] and row[n] and they will be initialized to 0. Now, traverse the array for each element that is 0, and make
the col[j] and row[i] as 1. Now, again traverse the array, and for each position matrix[i][j], if col[j]==1 || row[i] ==1, then mark that element as 0.

Code:-
   public void setZeroes(int[][] matrix) {

        int n=matrix.length;
        int m=matrix[0].length;

        int row[]=new int[n];
        int col[]=new int[m];


        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(matrix[i][j]==0)
                {
                    row[i]=1;
                    col[j]=1;
                }
            }
        }

        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(row[i]==1||col[j]==1)
                {
                    matrix[i][j]=0;
                }
            }
        }
}


T.C. -> O(n*m)
S.C. -> O(n) + O(m)

Optimal Approach:- In place of using the extra arrays, make use of the first row and first column but keep the edge cases in mind as well.

Code:-
class Solution {
    public void setZeroes(int[][] matrix) {

        // In place of using two extra arrays to keep track of the rows and columns having zeroes
        // make the use of the first row and forst col of array itself.

        int n=matrix.length;
        int m=matrix[0].length;

        // col[] = matrix[0][...]
        // row[] = matrix[...][0]

        int col0=1;

        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(matrix[i][j]==0)
                {
                    // Set col and row as 0.
                    matrix[i][0]=0;

                    if(j!=0)
                    matrix[0][j]=0;
                    else
                    col0=0;
                    
                }
            }
        }

        for(int i=1;i<n;i++)
        {
            for(int j=1;j<m;j++)
            {
                if(matrix[i][j]!=0)
                {
                    if(matrix[0][j]==0||matrix[i][0]==0)
                    {
                        matrix[i][j]=0;
                    }
                }
            }
        }

    if(matrix[0][0]==0)
    { 
        for(int j=0;j<m;j++)
        {
           
                matrix[0][j]=0;
        }
    }

    if(col0==0)
     {
        for(int i=0;i<n;i++)
        {
           
                matrix[i][0]=0;
        }
     }

  }
}


T.C. -> O*=(n*m)
S.C. -> O(1)


