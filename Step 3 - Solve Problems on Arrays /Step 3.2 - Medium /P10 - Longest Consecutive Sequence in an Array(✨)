Problem Link:-
https://www.codingninjas.com/studio/problems/longest-successive-elements_6811740?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=PROBLEM


Solution:-

Brute Force:-

Code:-
 public static int longestSuccessiveElements(int []a) {
        // Write your code here.

        // Brute Force
        int max=Integer.MIN_VALUE;
        int cnt=0,x=0;

        for(int i=0;i<a.length;i++)
        {
            x=a[i];
            cnt=0;
            while(ls(a,x))
            {
                cnt+=1;
                x+=1;
            }
            max=Math.max(max,cnt);
        }
        return max;
    }

    public static boolean ls(int a[],int x)
    {
        for(int i=0;i<a.length;i++){
            if(a[i]==x) return true;
        }

        return false;
    }

T.C. -> O(N^2)
S.C. -> O(1)


Better Approach:-
Sort the array and then try to find the longest consecutive sequence.

Code:-
  public static int longestSuccessiveElements(int []arr) {
        // Write your code here.

        int n=arr.length;
        Arrays.sort(arr);

        int ls = Integer.MIN_VALUE;
        int curCnt=0,maxCnt = 0;

        for(int i=0;i<n;i++)
        {
            if(arr[i]==ls+1)
            {
                curCnt+=1;    
            }
            else if(arr[i]!=ls)
            {
                curCnt = 1;
            }
            ls = arr[i];
            maxCnt = Math.max(maxCnt,curCnt);
        }
        return maxCnt;
  }

T.C. -> O(NlogN) + O(N)
S.C. -> O(1)


Optimal Solution:- We will put the array elements in a HashSet and then traverse the HashSet. Now, for every element in the hashSet, we will check if there exists
an element smaller than the current element. In this way, we will make sure that the current element is not a middle element of a sequence. If there does not exist
an element before the current element that means it is the starting element of a sequence and then check till when the sequence goes and store it in the max count.


Code:-
import java.util.*;
public class Solution {
    public static int longestSuccessiveElements(int []arr) {
        // Write your code here.
        HashSet<Integer> set=  new HashSet<>();

        for(int i=0;i<arr.length;i++)
        {
            set.add(arr[i]);
        }

        int val=0,cnt=0,max=Integer.MIN_VALUE;

        for(int i:set)
        {
            val = i;
            cnt=0;
            if(set.contains(val-1)==false)
            {
                while(set.contains(val))
                {
                    val++;
                    cnt++;
                }

                max = Math.max(max,cnt);
            }
        }
        return max;
    }
}
T.C. -> At max, the tc will be O(3N) i.e. O(N) for traversing and putting elements in the array and O(2N) for finding the longest sequence.
S.C. -> O(N)

