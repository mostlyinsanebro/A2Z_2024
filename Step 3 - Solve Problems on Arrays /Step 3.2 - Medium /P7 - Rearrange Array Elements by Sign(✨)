Problem Link:-
https://codingninjas.com/studio/problems/alternate-numbers_6783445?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=PROBLEM


Solution:- 

Brute Force:- Use two arrays, stote all negatives in one array and all positives in another array.
After that, traverse the array and put the elements from positive elements at even indexes and elements from negative array at odd indexes.

Code:- 
    public static int[] alternateNumbers(int []a) {
        // Write your code here.
        int pCnt=0,nCnt=0,i=0,n=a.length;
        for(i=0;i<n;i++)
        {
            if(a[i]<0) nCnt++;
        }
        pCnt=n-nCnt;
        
        int pos[]=new int[pCnt];
        int neg[]=new int[nCnt];
        
        int pidx=0,nidx=0;
        
        for(i=0;i<n;i++)
        {
            if(a[i]<0) 
            {
                neg[nidx]=a[i];
                nidx++;
            }
            else
            {
                pos[pidx]=a[i];
                pidx++;
            }
        }
        
        pidx=0;
        nidx=0;
        i=0;
        
        while(i<n)
        {
            if(i%2==0)
            {
                a[i]=pos[pidx];
                pidx++;
            }
            else
            {
                a[i]=neg[nidx];
                nidx++;
            }

            i++;
        }

        return a;
}

T.C. -> O(3N) ~ O(N)
S.C. -> O(N)



Optimal Approach:- Take an extra array with the same size and take two pointers, one pointing at 0 and other pointing to 1, now we know that all positives will go
to even indexes and all negatives will go to odd indexes. So, we will traverse the array and put the positive elements at the pos index and then make the pos
index as the next pos available to us in the array, do the same for negative elements. Stop when pos>n && neg>n.

Code:- 
    public static int[] alternateNumbers(int []a) {
        // Write your code here.
        int n=a.length;
        int ans[]=new int[n];
        int pos=0,neg=1,i=0;

        while(i<n)
        {
            if(a[i]>0)
            {
                ans[pos]=a[i];
                pos+=2;
            }
            else
            {
                ans[neg]=a[i];
                neg+=2;
            }
            i++;
        }
        return ans;
}

T.C. -> O(N)
S.C. -> O(N)



Note:- Above approaches work in case the number of positive and negative elements are equal. If the number of positive and negative elements is not equal, then
we will have to make some tweaks.

Code:-
    public static int[] alternateNumbers(int []a) {
        // Write your code here.
        int pCnt=0,nCnt=0,n=a.length,i=0;
        int pidx=0,nidx=0;
        for(i=0;i<n;i++)
        {
            if(a[i]<0) nCnt++;
        }
        pCnt=n-nCnt;

        int pos[]=new int[pCnt];
        int neg[]=new int[nCnt];

        for(i=0;i<n;i++)
        {
            if(a[i]>0)
            {
                pos[pidx]=a[i];
                pidx++;
            }
            else
            {
                neg[nidx]=a[i];
                nidx++;
            }
        }

        pidx=0;
        nidx=0;
        i=0;

        // for(i=0;i<pCnt;i++)
        // {
        //     System.out.print(pos[i]+" ");
        // }
        // System.out.println();

        // for(i=0;i<nCnt;i++)
        // {
        //     System.out.print(neg[i]+" ");
        // }

        if(pCnt>nCnt)
        {
            while(i/2<nCnt)
            {
                if(i%2==0)
                {
                    a[i]=pos[pidx];
                    pidx++;
                }
                else
                {
                    a[i]=neg[nidx];
                    nidx++;
                }
                i++;
            }

            while(i<n)
            {
                a[i]=pos[pidx];
                pidx++;
                i++;
            }
        }
        else
        {
            while(i/2<pCnt)
            {
                if(i%2==0)
                {
                    a[i]=pos[pidx];
                    pidx++;
                }
                else
                {
                    a[i]=neg[nidx];
                    nidx++;
                }
                i++;
            }
            while(i<n)
            {
                a[i]=neg[nidx];
                nidx++;
                i++;
            }

        }

        return a;
}

T.C. -> O(N)
S.C. -. O(N)
