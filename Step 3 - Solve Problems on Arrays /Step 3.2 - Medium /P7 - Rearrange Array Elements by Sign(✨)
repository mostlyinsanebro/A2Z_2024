Problem Link:-
https://codingninjas.com/studio/problems/alternate-numbers_6783445?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=PROBLEM


Solution:- 

Brute Force:- Use two arrays, stote all negatives in one array and all positives in another array.
After that, traverse the array and put the elements from positive elements at even indexes and elements from negative array at odd indexes.

Code:- 
    public static int[] alternateNumbers(int []a) {
        // Write your code here.
        int pCnt=0,nCnt=0,i=0,n=a.length;
        for(i=0;i<n;i++)
        {
            if(a[i]<0) nCnt++;
        }
        pCnt=n-nCnt;
        
        int pos[]=new int[pCnt];
        int neg[]=new int[nCnt];
        
        int pidx=0,nidx=0;
        
        for(i=0;i<n;i++)
        {
            if(a[i]<0) 
            {
                neg[nidx]=a[i];
                nidx++;
            }
            else
            {
                pos[pidx]=a[i];
                pidx++;
            }
        }
        
        pidx=0;
        nidx=0;
        i=0;
        
        while(i<n)
        {
            if(i%2==0)
            {
                a[i]=pos[pidx];
                pidx++;
            }
            else
            {
                a[i]=neg[nidx];
                nidx++;
            }

            i++;
        }

        return a;
}

T.C. -> O(3N) ~ O(N)
S.C. -> O(N)



Optimal Approach:- Take an extra array with the same size and take two pointers, one pointing at 0 and other pointing to 1, now we know that all positives will go
to even indexes and all negatives will go to odd indexes. So, we will traverse the array and put the positive elements at the pos index and then make the pos
index as the next pos available to us in the array, do the same for negative elements. Stop when pos>n && neg>n.

Code:- 
    public static int[] alternateNumbers(int []a) {
        // Write your code here.
        int n=a.length;
        int ans[]=new int[n];
        int pos=0,neg=1,i=0;

        while(i<n)
        {
            if(a[i]>0)
            {
                ans[pos]=a[i];
                pos+=2;
            }
            else
            {
                ans[neg]=a[i];
                neg+=2;
            }
            i++;
        }
        return ans;
}

T.C. -> O(N)
S.C. -> O(N)



Note: The above approaches work if the number of positive and negative elements are equal. If the number of positive and negative elements is not equal, then
we will have to make some tweaks.

Approach:- Take two pointers, pidx and nidx, pidx on the first positive number and nidx on the first negative number in arr. After that, traverse the ans array and 
if the index%2==0, then place a positive number on that index and go to the next positive element in arr, else place a negative number on the odd index and find the 
next negative in the arr. Do this while the pidx<n and nidx<a n and as soon as one of them becomes >=n, then place all the remaining elements whether they are 
all positives or all negatives at the end of the array depending on the situation.

Code:-
 // Online Java Compiler
// Use this editor to write, compile, and run your Java code online
import java.util.*;

class Solution {
    public static void main(String[] args) {
        // Write your code here
        Scanner sc= new Scanner(System.in);

        int n=sc.nextInt();
        int arr[]= new int[n];

        for(int i=0;i<n;i++)
        {
            arr[i]=sc.nextInt();
        }

        int ans[]=new int[n];
        int pidx=0,nidx=0;

        while(pidx<n&&arr[pidx]<0) 
        {
            pidx++;
        }

        while(nidx<n&&arr[nidx]>0)
        {
            nidx++;
        }

        int i=0;

        while(i<n&&pidx<n&&nidx<n)
        {
            if(i%2==0)
            {
                ans[i]=arr[pidx];
                pidx++;

                while(pidx<n&&arr[pidx]<0) pidx++;
            }
            else
            {
                ans[i]=arr[nidx];
                nidx++;

                while(nidx<n&&arr[nidx]>0) nidx++;
            }
            i++;
        }

        if(pidx<n)
        {
            while(pidx<n)
            {
                ans[i]=arr[pidx];pidx++;
                i++;
            }
        }
        else
        {
            while(nidx<n)
            {
                ans[i]=arr[nidx];
                nidx++;
                i++;
            }
        }

        for(i=0;i<n;i++)
        {
            System.out.print(ans[i]+" ");
        }
    }
}

T.C. -> O(N)
S.C. -. O(N)
