Problem Link:-
https://www.geeksforgeeks.org/problems/find-first-and-last-occurrence-of-x0849/1?utm_source=geeksforgeeks&utm_medium=article_practice_tab&utm_campaign=article_practice_tab
https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/

Solution:- 
Brute Force:- Do a linear search and find the first and last occurence of an element.
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int fo=-1;
        int lo=-1;

        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]==target)
            {
                fo=i;
                lo=i;
                while(i<nums.length&&nums[i]==target)
                {
                    lo=i;
                    i++;
                }
            }
        }
        int ans[]=new int[2];
        ans[0]=fo;
        ans[1]=lo;
        return ans;
    }
}


Optimal Solution:-
Use Binary Search

Code:- 
class pair  {  
    long first, second;  
    public pair(long first, long second)  
    {  
        this.first = first;  
        this.second = second;  
    }  
}
*/

class Solution {
    
    public pair indexes(long arr[], long x)
    {
        // Your code goes here
       
        
        int low=0,high=arr.length-1,mid=0;
        long first=-1,last=-1;
        
        
        first = firstOccurence(arr,x,0,arr.length-1);
        last  = lastOccurence(arr,x,0,arr.length-1);
       

       
        
        pair p = new pair(first,last);
        return p;
    }
    
    public static long firstOccurence(long arr[],long x,int low,int high)
    {
        long first=-1;
        int mid = 0;
         while(low<=high)
        {
            mid = (low+high)/2;
            
            if(arr[mid]==x)
            {
                first = mid;
                high = mid-1;
            }
            else if(arr[mid]<x)
            {
                low = mid+1;
            }
            else
            {
                high = mid-1;
            }
        }
        
        return first;
    }
    
    public static long lastOccurence(long arr[],long x,int low,int high)
    {
        long last=-1;
        int mid = 0;
         while(low<=high)
        {
            mid = (low+high)/2;
            
            if(arr[mid]==x)
            {
                last = mid;
                low = mid+1;
            }
            else if(arr[mid]<x)
            {
                low = mid+1;
            }
            else
            {
                high = mid-1;
            }
        }
        
        return last;
    }
}

T.C. -> O(logN)
S.C. -> O(1)
