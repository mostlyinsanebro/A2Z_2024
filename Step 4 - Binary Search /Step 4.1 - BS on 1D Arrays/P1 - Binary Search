Problem Link:-
https://www.codingninjas.com/studio/problems/binary-search_972?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=PROBLEM


Solution:- Binary Search is a search algorithm which is used for searching an element in a closed sorted space.

Approach:- Go to the mid of array and see if the target element is smaller or larger than the mid element. If it is smaller, go to left of mid and do the same there else go to right and do the binary search there.

Iterative Code:-
    int binarysearch(int arr[], int n, int k) {
        // code here
        
        int l=0,r=n-1,mid=0;
        
        while(l<=r)
        {
            mid=(l+r)/2;
            
            if(arr[mid]==k)
            {
                return mid;
            }
            else if(arr[mid]<k)
            {
                l=mid+1;
            }
            else
            {
                r=mid-1;
            }
        }
        
        return -1;
}

T.C. -> O(logN)
S.C. -> O(1)


Recursive Code:-
public class Solution {
    public static int search(int []arr, int target) {
        // Write your code here.
        return bs(arr,0,arr.length-1,target);
    }

    public static int bs(int arr[],int l, int r,int target)
    {
        if(l>r)
            return -1;

        int mid = (l+r)/2;

        if(arr[mid]==target)
            return mid;
        else if(target>arr[mid])
           return bs(arr,mid+1,r,target);
        else
          return bs(arr,l,mid-1,target);
    }
}

T.C. -> O(logN)
S.C. -> O(logN)

Overflow Case:- If the max element is Integer.MAX_VALUE and suppose the target is also the Integer.MAX_VALUE, then for finding the mid = (low+high)/2 which will be 2 * Int_Max which can not be stored in int,
then take long long for storing low, high and mid.
else find mid as low+(high-low)/2 ~ (2*low+high-low)/2~ (low+high)/2 . This will be stored in int w/o a problem.
