Problem Link:-
https://www.geeksforgeeks.org/problems/search-in-a-rotated-array4618/1


Solution:-
Brute Force:- Use Linear search.

Optimal Solution:- Use the variation of BS on it.The array will definitely be sorted on either half of the mid element, either left
or right, so make use of that approach to find the element.
If the element is at the mid, simply return the mid.
else , if the left half is sorted, then check whether the target element exists on the left half, 
if yes, then search in that half, else search in right half,
else if, the right half is sorted and element exists between the mid and high , then search in that half,
else search in the left half.

Code:- 
    int search(int[] arr, int l, int h, int k)
    {
        // l: The starting index
        // h: The ending index, you have to search the key in this range
        // Complete this function
        
        int low=0,high=arr.length-1,mid=0;

        while(low<=high)
        {
            mid = (low+high)/2;

            if(arr[mid]==k)
            {
                return mid;
            }
           // If left half is sorted
           if(arr[low]<=arr[mid])
           {
               if(arr[low]<=k&&arr[mid]>=k)
               {
                   high=mid-1;
               }
               else
               {
                   low=mid+1;
               }
           }
           // If right half is sorted
           else
           {
               if(arr[mid]<=k&&arr[high]>=k)
               {
                   low=mid+1;
               }
               else
               {
                   high=mid-1;
               }
           }
        }

        return -1;
}

T.C. -> O(LogN)
S.C. -> O(1)
