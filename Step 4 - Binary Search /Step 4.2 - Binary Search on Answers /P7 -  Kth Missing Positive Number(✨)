Problem Link:-
https://www.codingninjas.com/studio/problems/kth-missing-element_893215?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=PROBLEM


Solution:-
Brute Force:- The concept used is that whatever element is smaller than k in the array will take one place and we will have to increase k by 1. This way we will
get the kth missing element from an array starting from 1. Initially, take k as the answer because k can potentially be the smallest missing number in the array.
Traverse the array after that and whenever you find a smaller element than k, increase k by 1, this will make sure that each smaller element takes makes up for one
place before k, so we will have to increase k by 1 and when element is >k, we break out of the loop and return k.
Code:-

    public static int missingK(int[] vec, int n, int k) {
        // Write your code here.
        for(int i=0;i<n;i++)
        {
            if(vec[i]<=k) k++;
            else break;
        }
        return k;
    }

T.C. -> O(N)
S.C. -> O(1)


Optimal Solution:- Use the approach that how many elements are missing till a particular number.

Code:-
    public static int missingK(int[] vec, int n, int k) {
        // Write your code here.
        int low=0,high=n-1,mid=0,miss=0;
        if(k<vec[0])
            return k;

        while(low<=high)
        {
            mid=(low+high)/2;
            miss=vec[mid]-(mid+1);

            if(miss<k)
            {
                low=mid+1;
            }
            else if(miss>=k)
            {
                high=mid-1;
            }
        }

        int highmiss=k-(vec[high]-(high+1));
        return vec[high]+highmiss;
       // return high;
}


T.C. -> O(logN)
