Problem Link:-
https://www.codingninjas.com/studio/problems/aggressive-cows_1082559?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf


Brute Force:- Loop over diatnce from 1-> max-min and check for each distance whether it is possible to place k cows for that distance in the array.
If yes, make it the answer, else break out of the loop and return the ans.

Code:-
    public static boolean canWePlaceCows(int stalls[],int dis,int cows)
    {
        int cntCows=1,last=stalls[0];
        for(int i=1;i<stalls.length;i++)
        {
            if(stalls[i]-last>=dis)
            {
                cntCows++;
                last=stalls[i];
            }

            if(cntCows==cows)
            {
                return true;
            }
        }
        return false;
    }
    public static int aggressiveCows(int []stalls, int k) {
        //    Write your code here.
        // The range of distance will be from 1 to max-min and keep on checking if we can place 
        // the cows or not in the array with that distance. When we get a no, the previous dis
        // will be the answer.

        int max=Integer.MIN_VALUE,min=Integer.MAX_VALUE,ans=-1;

        // Sort the array first
        Arrays.sort(stalls);

        for(int i=0;i<stalls.length;i++)
        {
            max=Math.max(stalls[i],max);
            min = Math.min(stalls[i],min);
        }

        for(int i=1;i<=max-min;i++)
        {
            if(canWePlaceCows(stalls,i,k)==true)
            {
                ans=i;
            }
            else
            {
               
                break;
            }
        }
        return ans;
}

T.C. -> O(NlogN+((max-min)*N))
S.c. -> O(1)

Optimal Solution:- Using Binary Search
Code:-
   public static boolean canWePlaceCows(int stalls[],int dis,int cows)
    {
        int cntCows=1,last=stalls[0];
        for(int i=1;i<stalls.length;i++)
        {
            if(stalls[i]-last>=dis)
            {
                cntCows++;
                last=stalls[i];
            }

            if(cntCows==cows)
            {
                return true;
            }
        }
        return false;
    }
    public static int aggressiveCows(int []stalls, int k) {
        //    Write your code here.
        // The range of distance will be from 1 to max-min and keep on checking if we can place 
        // the cows or not in the array with that distance. When we get a no, the previous dis
        // will be the answer.

        int max=Integer.MIN_VALUE,min=Integer.MAX_VALUE,ans=-1;

        // Sort the array first
        Arrays.sort(stalls);


        int low=1,high=stalls[stalls.length-1],mid=0;

        while(low<=high)
        {
            mid = (low+high)/2;
            if(canWePlaceCows(stalls,mid,k)==true)
            {
                ans=mid;
                low=mid+1;
            }
            else
            {
                high=mid-1;
            }
        }
        return ans;
}

T.C. -> O(NlogN+(log(max-min)*N))
S.C. -> O(1)
