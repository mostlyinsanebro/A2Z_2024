Problem Link:-
https://www.geeksforgeeks.org/problems/k-th-element-of-two-sorted-array1317/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=k-th-element-of-two-sorted-array


Brute Solution:- Use extra array and find the kth element.
class Solution {
    public long kthElement(int k, int arr1[], int arr2[]) {
        // code here
        int c=0,el=0,i=0,j=0;
        
        while(i!=arr1.length&&j!=arr2.length)
        {
            if(arr1[i]<arr2[j])
            {
                el=arr1[i];
                i++;
            }
            else
            {
                el=arr2[j];
                j++;
            }
            
            if(c==k-1) return el;
            
            c++;
        }
        
        while(i!=arr1.length)
        {
            el=arr1[i];
            i++;
            
            if(c==k-1) return el;
            c++;
        }
        
        
        while(j!=arr2.length)
        {
            el=arr2[j];
            j++;
            
            if(c==k-1) return el;
            c++;
        }
        
        return 0;
    }
}

T.C. -> O(n1+n2)
S.C. -> O(n1+n2)

Better Approach:- The better approach is not to use the whole array for storing answer in array, just to use a single element to store answer and as soon as the 
count of te=ravesred elements become equal to k, we return the answer.

Code:-
class Solution {
    public long kthElement(int k, int arr1[], int arr2[]) {
        // code here
        int c=0,el=0,i=0,j=0;
        
        while(i!=arr1.length&&j!=arr2.length)
        {
            if(arr1[i]<arr2[j])
            {
                el=arr1[i];
                i++;
            }
            else
            {
                el=arr2[j];
                j++;
            }
            
            if(c==k-1) return el;
            
            c++;
        }
        
        while(i!=arr1.length)
        {
            el=arr1[i];
            i++;
            
            if(c==k-1) return el;
            c++;
        }
        
        
        while(j!=arr2.length)
        {
            el=arr2[j];
            j++;
            
            if(c==k-1) return el;
            c++;
        }
        
        return 0;
    }
}

T.C. -> O(n1+n2)
S.C. -> O(1)


Optimal Solution:- Use the same approach of partition as used in finding median of 2 sorted arrays.

Code:-
class Solution {
    public long kthElement(int k, int arr1[], int arr2[]) {
        // code here
        int n1=arr1.length;
        int n2=arr2.length;
        
        if(n1>n2) return kthElement(k,arr2,arr1);
        
        int l=Math.max(0,k-n2);
        int h=Math.min(k,n1);
        
        int mid1=0,mid2=0;
        int l1,l2,r1,r2;
        
        
        while(l<=h)
        {
            mid1=(l+h)/2;
            mid2=k-mid1;
            
            l1=Integer.MIN_VALUE;
            l2=Integer.MIN_VALUE;
            r1=Integer.MAX_VALUE;
            r2=Integer.MAX_VALUE;
            
            
            if(mid1>0) l1=arr1[mid1-1];
            if(mid2>0) l2=arr2[mid2-1];
            
            if(mid1<n1) r1=arr1[mid1];
            if(mid2<n2) r2=arr2[mid2];
            
            if(l1<=r2&&l2<=r1)
            {
                return Math.max(l1,l2);
            }
            else if(l1>r2)
                h=mid1-1;
            else
                l=mid1+1;
            
        }
        return 0;
    }
}


T.C. -> O(min(logm,logn))
S.C. -> O(1)

