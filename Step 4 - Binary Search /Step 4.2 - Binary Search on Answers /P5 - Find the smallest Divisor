Problem Link:-
https://www.codingninjas.com/studio/problems/smallest-divisor-with-the-given-limit_1755882?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=PROBLEM
https://leetcode.com/problems/find-the-smallest-divisor-given-a-threshold/description/

Solution:-
Brute Force:- Using Linear search.
public class Solution {

    public static int findSum(int arr[],int i)
    {
        int sum=0;
        for(int j=0;j<arr.length;j++)
        {
            sum+=Math.ceil((double)arr[j]/(double)i);
        }
        return (int)sum;
    }
    public static int smallestDivisor(int arr[], int limit) {
        // Write your coder here

        int max=Integer.MIN_VALUE;

        for(int i=0;i<arr.length;i++)
        {
            max=Math.max(arr[i],max);
        }

        int sum=0,ans=0;

        for(int i=1;i<=max;i++)
        {
            sum=findSum(arr,i);

            if(sum<=limit)
            {
                return i;
            }
        }
        return -1;
    }
}

T.C. -> O(max*N)
S.C.-> O(1)

Optimal Solution:- Using Binary Search.
public class Solution {

    public static int findSum(int arr[],int i)
    {
        int sum=0;
        for(int j=0;j<arr.length;j++)
        {
            sum+=Math.ceil((double)arr[j]/(double)i);
        }
        return (int)sum;
    }
    public static int smallestDivisor(int arr[], int limit) {
        // Write your coder here

        int max=Integer.MIN_VALUE;

        for(int i=0;i<arr.length;i++)
        {
            max=Math.max(arr[i],max);
        }

        int sum=0,ans=0;
        int low=1,high=max,mid=0;

        while(low<=high)
        {
            mid = (low+high)/2;
            sum = findSum(arr,mid);

            if(sum<=limit)
            {
                ans=mid;
                high=mid-1;
            }
            else 
            {
                low=mid+1;
            }
        }
        return ans;
    }
}

T.C. -> O(N*log(max))
