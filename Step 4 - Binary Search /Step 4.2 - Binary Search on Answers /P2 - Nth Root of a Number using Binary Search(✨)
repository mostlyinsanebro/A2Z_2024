Problem Link:-
https://www.codingninjas.com/studio/problems/nth-root-of-m_1062679?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=PROBLEM



Solution:-

Brute Force:-
    public static int NthRoot(int n, int m) {
        // Write your code here.
        int ans=0,val=0;

        for(int i=1;i<=m;i++)
        {
            val = (int)Math.pow(i,n);

            if(val== m)
            {
                return i;
            }
            else if(val>m)
            {
                break;
            }
        }

        return -1;
}

T.C. -> O(m*logn)


Optimal Solution:- Use binary Search. Whenever we have a range from 1->n and we know the answer lies between 1 and n, we can use BS in it, then.

        int low=0,high=m,val=0,mid=0;

        while(low<=high)
        {
            mid = (low+high)/2;

            val = (int) Math.pow(mid,n);

            if(val==m)
                return mid;
            else if(val>m)
            {
                high = mid-1;
            }
            else
            {
                low=mid+1;
            }
        }

        return -1;
}

T.C. -> O(Nlog(M)) -> logM for the BS and logN for finding pow(mid,n)


Another Optimal Solution without pow function:-
class Solution
{
    public int func(int mid,int n,int m)
    {
        long ans=1;
        for(int i=1;i<=n;i++)
        {

            ans=ans*mid;
            
            if(ans>m) return 2;
        }
        
        if(ans==m) return 1;
        
        return 0;
    }
    public int NthRoot(int n, int m)
    {
        // code here
        int l=1,h=m;
        int mid=0,ans=0;
        
        while(l<=h)
        {
            mid=(l+h)/2;
            
            ans=func(mid,n,m);
            
            if(ans==1) return mid;
            
            else if(ans==2) h=mid-1;
        
            else 
                l=mid+1;
        }
        
        return -1;
    }
}
