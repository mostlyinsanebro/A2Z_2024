Problem Link:-
https://www.codingninjas.com/studio/problems/check-palindrome-recursive_624386?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=PROBLEM


Solution:-
TC -> O(N/2)
SC -> Auxillary Space => O(N/2)

public class Solution {
    public static boolean isPalindrome(String str) {
        // Write your code here.
        return ispal(0,str.length()-1,str);
    }
    public static boolean ispal(int l,int r,String str)
    {
        if(l>=r) return true;
        if(str.charAt(l)!=str.charAt(r))
            return false;
        return ispal(l+1,r-1,str);
    }
}



Valid Palindrome:- https://leetcode.com/problems/valid-palindrome/description/

T.C. -> O(N)  -- N is the string length
Auxillary space -> O(N)

Solution:-
class Solution {
    public boolean isPalindrome(String s) {
        String str = "";
        for(int i=0;i<s.length();i++)
        {
            char ch=s.charAt(i);

            if(ch>='A'&&ch<='Z')
            {
                ch = Character.toLowerCase(ch);
                str+=ch;
            }
            else if(ch>='a'&&ch<='z'||ch>='0'&&ch<='9')
            {
                str+=ch;
            }
        }

        return isPal(str);

    }

    public static boolean isPal(String s)
    {
        if(s.length()==0||s.length()==1)
        {
            return true;
        }
        
        //System.out.println(s.substring(1,s.length()-1));
        if((s.charAt(0)==s.charAt(s.length()-1))&&isPal(s.substring(1,s.length()-1)))
            return true;
        else
            return false;
    }
}
