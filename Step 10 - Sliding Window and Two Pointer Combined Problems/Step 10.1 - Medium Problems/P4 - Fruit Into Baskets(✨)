Problem Link:-
https://www.geeksforgeeks.org/problems/fruit-into-baskets-1663137462/1


Brute Force Solution:-
class Solution {
    public static int totalFruits(Integer[] arr) {
        // code here
        HashSet<Integer> set;
        int max=0;
        
        for(int i=0;i<arr.length;i++)
        {
            set=new HashSet<>();
            for(int j=i;j<arr.length;j++)
            {
                set.add(arr[j]);
                
                if(set.size()<=2)
                {
                    max=Math.max(max,j-i+1);
                }
                else 
                    break;
            }
        }
        
        return max;
    }
}

T.C. -> O(N^2)
S.C. -> O(1) ~ as set only stores 3 values which is O(1) anyways.


Optimal Solution:- Using 2 pointer and sliding window approach and use hashmap.
Code:-
class Solution {
    public static int totalFruits(Integer[] arr) {
        // code here
        HashMap<Integer,Integer> map = new HashMap<>();
        int l=0,r=0,max=0;
        
        while(r<arr.length)
        {
            map.put(arr[r],map.getOrDefault(arr[r],0)+1);
            
            if(map.size()<=2)
            {
                max=Math.max(max,r-l+1);
            }
            else if(map.size()>2)
            {
                while(map.size()>2)
                {
                    map.put(arr[l],map.get(arr[l])-1);
                    if(map.get(arr[l])==0) map.remove(arr[l]);
                    l++;
                }
                max=Math.max(max,r-l+1);
            }
            r++;
        }
        return max;
    }
}


T.C. -> O(2N)
S.C. -> O(1)




