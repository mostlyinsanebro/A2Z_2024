Problem Link:-
https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards/description/
https://www.geeksforgeeks.org/problems/maximum-point-you-can-obtain-from-cards/0
https://www.naukri.com/code360/problems/maximum-points-from-cards_8391016?leftPanelTabValue=PROBLEM


Brute Force Solution:- Make all the combinations for selecting k elements from the start and then end and compare and get the max.
Code:-
class Solution {
    public int maxScore(int[] arr, int k) {
        int n = arr.length;
        int sum=0,max=Integer.MIN_VALUE;
        if(n<k) return 0;
        
        if(n==k)
        {
            for(int i=0;i<n;i++)
            {
                sum+=arr[i];
            }
            return sum;
        }

        int j=0,s=k;
        while(s>=0)
        {
            j=0;
            sum=0;
            while(j<s)
            {
                sum+=arr[j];
                j++;
            }
            j=0;
            while(j<k-s)
            {
                sum+=arr[n-j-1];
                j++;
            }
            s--;
            max = Math.max(max,sum);
        }
        return max;
    }
}

T.C. -> O(k^2)
S.C. -> O(1)


Optimal Solution:- Use sliding window approach with 2 pointer.
Code:-
class Solution {
    public int maxScore(int[] arr, int k) {
        int sum=0;
        int n = arr.length;
        if(k==n)
        {
            for(int i=0;i<n;i++)
            {
                sum+=arr[i];
            }
            return sum;
        }
        for(int i=0;i<k;i++)
        {
            sum+=arr[i];
        }

        int l=k-1;
        int r=n-1;
        int max=sum;
        while(l>=0)
        {
            sum-=arr[l];
            l--;
            sum+=arr[r];
            r--;
            max = Math.max(sum,max);
        }
        return max;
    }
}

T.C. -> O(2k)
S.C. -> O(1)


