Problem Link:-
https://leetcode.com/problems/binary-subarrays-with-sum/


Brute Force Solution:-
class Solution {
    public int numSubarraysWithSum(int[] arr, int goal) {
        int sum=0,cnt=0;
        for(int i=0;i<arr.length;i++)
        {
            sum=0;
            for(int j=i;j<arr.length;j++)
            {
                sum+=arr[j];
                if(sum==goal) cnt++;

                if(sum>goal) break;
            }
        }
        return cnt;
    }
}

T.C. -> O(N^2)
S.C. -> O(1)

Better Solution:- Use hashmap approach to store previous sums.
Code:-
class Solution {
    public int numSubarraysWithSum(int[] arr, int goal) {
        HashMap<Integer,Integer> map = new HashMap<>();

        int i=0,sum=0,cnt=0;

        while(i<arr.length)
        {
            sum+=arr[i];

            if(sum==goal)
                cnt++;

            cnt+=map.getOrDefault(sum-goal,0);

            map.put(sum,map.getOrDefault(sum,0)+1);
            i++;
        }
        return cnt;
    }
}


T.C. -> O(N)
S.C. -> O(N)


Optimal Solution:- Use 2 pointers and sliding window here.
Code:-


