Problem Link:-
https://leetcode.com/problems/lru-cache/
https://www.geeksforgeeks.org/problems/lru-cache/1
https://www.naukri.com/code360/problems/lru-cache-implementation_670276

Solution:-
class LRUCache {

    class Node
    {
        int key;
        int value;
        Node next;
        Node prev;

        Node(int key,int value)
        {
            this.key = key;
            this.value=value;
        }
    }


    HashMap<Integer,Node> map = new HashMap<>();
    Node head=new Node(-1,-1);
    Node tail=new Node(-1,-1);
    int cc;
    int cap;

    public void deleteNode(Node n)
    {
        n.prev.next=n.next;
        n.next.prev=n.prev;
        n.next=null;
        n.prev=null;
    }

    public void insertAfterHead(Node n)
    {
        n.prev=head;
        n.next=head.next;
        n.next.prev=n;
        head.next=n;
    }

    public LRUCache(int capacity) {
        cap=capacity;
        head.next=tail;
        tail.prev=head;
    }
    
    public int get(int key) {
        if(map.containsKey(key))
        {
            Node curr=map.get(key);
            deleteNode(curr);
            insertAfterHead(curr);

            curr=head.next;
            return curr.value;
        }
        return -1;
    }
    
    public void put(int key, int value) {
        if(map.size()==0||map.containsKey(key)==false&&map.size()<cap)
        {
            Node nn = new Node(key,value);
            insertAfterHead(nn);
            //nn=head.next;
            map.put(key,nn);
        }
       else if(map.containsKey(key)==false&&map.size()==cap)
       {
            Node nn = new Node(key,value);
            map.remove(tail.prev.key);
            deleteNode(tail.prev);
            insertAfterHead(nn);
            //nn=head.next;
            map.put(key,nn);;
       }
       else if(map.containsKey(key))
       {
            Node n=map.get(key);
            deleteNode(n);
            insertAfterHead(n);
            //n=head.next;
            n.value=value;
            map.put(key,n);
       }
    }
}

T.C. -> O(N)
S.C. -> O(2N)
