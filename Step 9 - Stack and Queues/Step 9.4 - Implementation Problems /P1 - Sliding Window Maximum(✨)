Problem Link:-
https://leetcode.com/problems/sliding-window-maximum/description/
https://www.geeksforgeeks.org/problems/maximum-of-all-subarrays-of-size-k3101/1
https://www.naukri.com/code360/problems/sliding-window-maximum_980226?leftPanelTabValue=SUBMISSION


Brute Force Solution:-
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int s=0,e=k-1;
        int max=Integer.MIN_VALUE;
        int ans[]=new int[nums.length-k+1];

        while(e<nums.length)
        {
            max=Integer.MIN_VALUE;
            for(int z=s;z<=e;z++)
            {
                max=Math.max(max,nums[z]);
            }
            ans[s]= max;
            s++;
            e++;
        }
        return ans;
    }
}

T.C. -> O((N-k)*k)
S.C. -> O(N-k+1)

Optimal Solution:- Keep storing the k elements and store elements in decreasing order as well.
class Solution {
    public int[] maxSlidingWindow(int[] arr, int k) {
        Deque<Integer> dq = new ArrayDeque<>();
        int n=arr.length;
        int ans[]=new int[n-k+1];

        for(int i=0;i<n;i++)
        {
            if(dq.size()!=0&&dq.peekFirst()<i-k+1)
                dq.pollFirst();

            while(dq.size()!=0&&arr[dq.peekLast()]<=arr[i])
                dq.pollLast();

            dq.addLast(i);

            if(i>=k-1) ans[i-k+1]=arr[dq.peekFirst()];
        }
        return ans;
    }
}

T.C. -> O(2N)
S.C. -> O(k)+O(N-k)


