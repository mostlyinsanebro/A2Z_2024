Problem Link:-
https://leetcode.com/problems/remove-k-digits/
https://www.geeksforgeeks.org/problems/remove-k-digits/1
https://www.naukri.com/code360/problems/remove-k-digits_1461221

Solution:- Passes LC and CN, gives TLE in GFG.
Steps:- Traverse the string from left to right, if the stack is empty, push element on the stack and if we get a larger element on top of the stack, pop it
from the stack. If we reach the end of the string or k becomes < 0 , then escape the loop. After that, put all the remaing elements of the strings which are not 
yet traversed to teh top of the stack. Now, make the answer array.

Now, cover 3 edge cases => if k==n, return "0".
if answer at end is "00200", then return it as "200".
if after whole traversal of the string and doing operations, k>0, then remove the k elemets from the end. 

Code:-
class Solution {
    public String removeKdigits(String S, int K) {
        // code here
        
        if(K==S.length()) return "0";
        
        Stack<Character> st = new Stack<>();
        
        
        for(int i=0;i<S.length();i++)
        {
            while(!st.isEmpty()&&K>0&&(int)st.peek()-'0'>(int)S.charAt(i)-'0')
            {
                st.pop();
                K--;
            }
            
            st.push(S.charAt(i));
        }
        
        
        while(K>0)
        {
            st.pop();
            K--;
        }
        
        if(st.isEmpty()) return "0";
        
        String ans="";
        while(!st.isEmpty())
        {
            ans=st.pop()+ans;
        }
        
        while(ans.length()>0&&ans.charAt(0)=='0') ans=ans.substring(1);
        
        if(ans.length()==0) return "0";
        return ans;
        
        
    }
}


T.C. -> O(3N)
S.C. -> O(2N)


Note: My solution exceeds TL in GFG. Check a solution on GFG.

Code:- It has some minor tweaks...
class Solution {
    public String removeKdigits(String S, int K) {
        // code here
        
        if(K==S.length()) return "0";
        
        Stack<Character> st = new Stack<>();
        
        
        for(int i=0;i<S.length();i++)
        {
            while(!st.isEmpty()&&K>0&&(int)st.peek()-'0'>(int)S.charAt(i)-'0')
            {
                st.pop();
                K--;
            }
            
            if(st.isEmpty()&&S.charAt(i)=='0')
                continue;
            
            st.push(S.charAt(i));
        }
        
        
        while(!st.isEmpty()&&K>0)
        {
            st.pop();
            K--;
        }
        
        if(st.isEmpty()) return "0";
        
        // String ans="";
        // while(!st.isEmpty())
        // {
        //     ans=st.pop()+ans;
        // }
        
        // while(ans.length()>0&&ans.charAt(0)=='0') ans=ans.substring(1);
        
        // if(ans.length()==0) return "0";
        // return ans;
        
        StringBuilder sb = new StringBuilder();
        while(!st.isEmpty())
        {
            sb.append(st.pop());
        }
        return sb.reverse().toString();
    }
}



